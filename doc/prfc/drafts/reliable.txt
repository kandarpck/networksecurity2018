


Network Working Group                                  K. Khandwala, Ed.
Request for Comments: 1                   JHU Network Security Fall 2018
Category: Standards Track                                 September 2018


                    Playground Request For Comments

Abstract

   The Reliable Internetwork Playground Protocol (RIPP) defines the
   standards used to communicate between entities over the Playground
   network.  It reliably establishes connections, transmits data with
   certain degree of error detection and correction and defines a
   graceful way of terminating the connection.  It also communicates
   with the upper and lower layers using multiplexing and demultiplexing
   of data streams.

Status of this Memo

   This document specifies a Playgrounds standards track protocol for
   the Playground Experiment, and requests discussion and suggestions
   for improvements.  Distribution of this memo is unlimited.

Copyright Notice

   Copyright (c) 2018 SETH JAMES NIELSON.  All rights reserved.

   This document is used solely for educational purposes.  Any citations
   within this document are also for educational purposes and also for
   technical reference.  If any of these cited elements are protected
   under copyright, their inclusion here falls under Fair Use
   provisions.



















Khandwala                    Standards Track                    [Page 1]

RFC 1                            PRFC's                   September 2018


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1.  Requirements Language  . . . . . . . . . . . . . . . . . .  3
   2.  Copyright Information  . . . . . . . . . . . . . . . . . . . .  4
   3.  Purpose/Technical Background . . . . . . . . . . . . . . . . .  5
   4.  Protocol Specifications  . . . . . . . . . . . . . . . . . . .  5
     4.1.  Session Establishment  . . . . . . . . . . . . . . . . . .  5
     4.2.  Session Termination  . . . . . . . . . . . . . . . . . . .  6
     4.3.  Data Transmission  . . . . . . . . . . . . . . . . . . . .  7
     4.4.  Error Handling . . . . . . . . . . . . . . . . . . . . . .  8
     4.5.  Packet Descriptions  . . . . . . . . . . . . . . . . . . .  9
     4.6.  Computational Algorithms . . . . . . . . . . . . . . . . . 10
     4.7.  State Machines . . . . . . . . . . . . . . . . . . . . . . 10
   5.  Normative References . . . . . . . . . . . . . . . . . . . . . 12
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . 12
   Intellectual Property and Copyright Statements . . . . . . . . . . 13


































Khandwala                    Standards Track                    [Page 2]

RFC 1                            PRFC's                   September 2018


1.  Introduction

   RFC's (Request for Comments) are a publication of the Internet
   Engineering Task Force (IETF).  RFC's have many purposes including
   the publication of standards, general information, and best
   practices.

   The PLAYGROUND experiment, developed by Seth James Nielson, is a
   pedigogical framework for instructing principles of Internet
   Security.  The primary goal of the PLAYGROUND framework is to provide
   a network system that allows students and researchers to develop
   security mechanisms as well as attacks against them.  The PLAYGROUND
   system is designed to provide a complex enough system to enable kinds
   of attacks and defenses one finds in the real Internet but with a
   much reduced complexity.

   Not only does PLAYGROUND provide a reduced complexity, but it also
   allows a student to think in terms of principles instead of just in
   raw implementation.  Cross-site scripting attacks may disappear in
   the future, but the principles of colliding security spaces will not.
   PLAYGROUND allows the students to try out principles in a new
   environment and with new concrete instantiations.

   Standards and other publications, such as RFC's, are a critical part
   of the security process.  Open standards allow design flaws to be
   captured early in the development of an Internet protocol or system.
   Discovered flaws can be reported and fixed quickly and effectively.

   Accordingly, as part of the PLAYGROUND experiment, collaborating
   participants, such as the students in a class, can practice and
   experiment with a publication process similar to RFC's.  These
   publications are called Playground RFC's and follow the same formats
   and serve the same purposes insofar as possible.

   This memo describes the PRFC standards, largely pointing to the
   corresponding standards for RFCs.  Differences, where they exist, are
   noted.  Also included is a description of a modified xml2rfc tool
   that can help to produce PRFC's with the proper formatting.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].







Khandwala                    Standards Track                    [Page 3]

RFC 1                            PRFC's                   September 2018


2.  Copyright Information

   The PLAYGROUND experiment is still new and has not yet developed a
   policy that has been reviewed by legal counsel.  However, at present,
   the following text MUST be used in the PRFC's.

   The copyright notice on the front page of the PRFC should read:
   "Copyright (c) 2018 SETH JAMES NIELSON.  All rights reserved.

   This document is used solely for educational purposes.  Any citations
   within this document are also for educational purposes and also for
   technical reference.  If any of these cited elements are protected
   under copyright, their inclusion here falls under Fair Use
   provisions."

   Student authors MUST grant copyrights to SETH JAMES NIELSON.
   However, they may also retain copyrights for themselves and add their
   names to the copyright notice accordingly.

   The final page of the PRFC MUST include a section entitled "Full
   Copyright Statement" that reads:

   "Copyright (C) Seth James Nielson (2018).  All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the PLAYGROUND experiment or
   other associated organizations, except by explicit permission.

   The limited permissions granted above are perpetual and will not be
   revoked by SETH JAMES NIELSON or his successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and SETH JAMES NIELSON and associated academic
   institutions DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE."

   After the "Full Copyright Statement" the PRFC MUST include a section
   entitled "Intellectual Property" that reads:

   The PLAYGROUND framework and student submissions for PLAYGROUND are



Khandwala                    Standards Track                    [Page 4]

RFC 1                            PRFC's                   September 2018


   intended to be free of any intellectual property conflicts.  All
   submitting parties, especially students, are not allowed to submit
   source code, specifications, or other components that are known to be
   protected by copyright, patents, or other IP mechanisms.  Students
   submitting creative content grant shared rights and ownership of
   their content to the PLAYGROUND project.  Specifically, any
   submission can be used in future educational settings including
   subsequent PLAYGROUND experiments.

   Any interested party is invited to bring to the experiment director's
   attention any copyrights, patents or patent applications, or other
   proprietary rights which may cover technology that may be currently
   in use without permission.

   It should be noted that these statements have not been reviewed by
   legal counsel.  Moreover, the academic institutions at which
   PLAYGROUND experiments take place may have additional or even
   conflicting copyright and intellectual property rules.  Accordingly,
   concerned parties may need to contact their own lawyer and/or
   resources at their institution to understand the rights and
   limitations associated with code donated to a PLAYGROUND experiment."

   As with the initial copyright notice, the Copyright assignment to
   Seth James Nielson can be agumented the the names of the authors.


3.  Purpose/Technical Background

   In this document, we describe Reliable Internetwork Playground
   Protocol (R.I.P.P), a protocol which is used for communication over
   the Playground - a network system that allows students and
   researchers to develop security mechanisms as well as attacks against
   them - defined in JHU Network Security class.


4.  Protocol Specifications

4.1.  Session Establishment

   RIPP protocol consists of a unique Playground IP Address (PIP) which
   will uniquely identify the machine connected to the Playground
   network.  RIPP also has port identifiers built in to identify and
   handle multiplexing and demultiplexing which can handle multiple
   separate data streams.

   RIPP performs a "three-way handshake" which establishes the session
   between the communicating entities which is followed by data
   transmission.  Establishing a session is essential before any



Khandwala                    Standards Track                    [Page 5]

RFC 1                            PRFC's                   September 2018


   transmission of payload can occur.  Similarly, no data can be
   transferred after the session has been terminated.  There is no
   restriction on who can establish a connection.  It can be initiated
   by either party in the communication channel.  Once an entity
   initiates the connection, the other party should respond with an
   acknowledgment.

   A simple "three-way handshake" is shown in figure 1 below.  The
   figure shows 2 parties RIPP A and RIPP B performing the handshake.
   In this scenario, RIPP A initiates the connection and RIPP B is
   responding to the handshake.  RIPP A sends a SYN packet indicating
   that it will use a certain sequence number.  RIPP B send back a SYN
   and acknowledges the SYN it received from RIPP A. The ACK sent by
   RIPP B states that it is expecting to hear sequence which follows the
   previous sequence number, acknowledging the earlier SYN.  RIPP A
   responds with an empty ACK and then starts sending data from the next
   stage.


      RIPP A                                                 RIPP B

  1.  CLOSED                                                LISTEN

  2.  SYN-SENT    -->     (SEQ=100)(CTL=SYN)            --> SYN-RECEIVED

  3.  ESTABLISHED --> (SEQ=300)(ACK=101)(CTL=SYN,ACK)   <-- SYN-RECEIVED

  4.  ESTABLISHED -->  (SEQ=101)(ACK=301)(CTL=ACK)      --> ESTABLISHED

  5.  ESTABLISHED --> (SEQ=101)(ACK=301)(CTL=ACK)(DATA) --> ESTABLISHED

    Figure 1: Basic 3-Way Handshake for Connection Synchronization



   The sequence number of the SYN packet can be based on any number
   generation system but should be different for all the SYN packets
   sent out.  No two connections should have the same sequence number.
   Further, RIPP B does not need to ACK every SYN packet sent to it.

4.2.  Session Termination

   The RIPP protocol specific a set of exchanges required to gracefully
   shut down the connection between communicating entities.  The "four-
   way handshake" process is used for correctly terminating the
   connection.  The first step for terminating the connection is to send
   a FIN packet to the other client.  There is no restriction on who can
   initiate the FIN request; any one of the communicating parties can



Khandwala                    Standards Track                    [Page 6]

RFC 1                            PRFC's                   September 2018


   send it to the other one.  Once the other party receives the FIN
   request, it should send back a FIN-ACK packet to acknowledge the RIP
   packet.  Once the acknowledgement is sent out, the data packets left
   in the buffer are cleared out and an acknowledgment for them is
   awaited.  When the sender receiver the ACK for all the packets, it
   sends out a FIN message and waits for a FIN-ACK from the other party.
   The connection can then close gracefully after the FIN-ACK packet is
   sent out.

   A simple version of the above "four-way handshake" to terminate the
   connection is shown below in figure 2.



       RIPP A                                                 RIPP B

   1.  ESTABLISHED                                          ESTABLISHED

   2.  (Close)
                  --> <SEQ=100><ACK=300><CTL=FIN,ACK>  -->

   3.             <-- <SEQ=300><ACK=101><CTL=ACK>      <--
                                                           Clear Buffer
   4.                                                       (Close)
                  <-- <SEQ=300><ACK=101><CTL=FIN,ACK>  <--

   5.             --> <SEQ=101><ACK=301><CTL=ACK>      -->

   6.  CLOSED

     Figure 2: Basic 4-Way Handshake for Connection Termination



4.3.  Data Transmission

   After the connection has been established, the sender and receiver
   can send packets of data to each other and continue communicating
   with each other.  The way that data flows between these two entities
   can be perceived as a stream oriented transfer of data.  The RIPP
   protocol sends chunks of bytes from the sender to the receiver.  The
   RIPP protocol has a maximum payload size of 2048 bytes.  In case the
   payload is greater than 2048, the RIPP protocol should break it down
   into chunks of 2048 bytes.  The data in the payload received by the
   RIPP protocol needs to be encapsulated into a Buffer.

   On the client side, the SEQ Number header field for the first data
   packet sent is set equal to the SEQ number of the ACK packet sent



Khandwala                    Standards Track                    [Page 7]

RFC 1                            PRFC's                   September 2018


   during the RIPP handshake.  For subsequent data packets, the SEQ
   number is determined by adding the sequence number of the previous
   packet with the length of the previous packet.  On the server side,
   the first data packet sent has the sequence number of the SYN-ACK
   packet sent during the handshake.  And similarly, for the subsequent
   packets, the sequence number is determined by adding the sequence
   number and length of the previous packet.

4.4.  Error Handling

   There are several different scenarios that can occur while
   transmitting data from one RIPP client to the other.

   1.  Incorrect order of the packets

   2.  Loss of packets

   3.  Corrupt data inside the packet

   4.  Phantom packets (receiver gets packets that have never been sent)

   a.  RIPP takes a simple approach to solving all these scenarios.  In
       the scenario where there is a loss of packets during handshake
       transmission or connection establishment, the corresponding party
       should resend the previous packet with a delay by keeping a
       timer.

   b.  Both the communicating parties maintain a protocol buffer at
       their end - a sort of cache which temporarily stores data and
       waits for the missing packet and out of order data.  As a result,
       RIPP can gracefully handle out of order packets and missing
       packets by storing them in the buffer before sending to the upper
       layers and sending ACK messages to the sender indicating
       retransmission which the sender can resend.  The sender also
       maintains a window on its side with the timestamp when it was
       sent.  If it does not receive an ACK before the timer expiry, it
       automatically resends the packet.

   c.  RIPP protocol also has a provision for correcting corrupt header
       as well as data inside the packet.  A checksum field inside the
       RIPP header provides basic integrity of the message.  RIPP uses
       the checksum to detect corruption of packet headers. i.e. the
       source, destination, and other meta-data.  It also includes an
       extra checksum that protects the packet "payload" as well as the
       header.  In case of simple scenarios this checksum can just be a
       simple one's complement or other fast and simple hash functions.
       The sender computes the hash and appends it in the header as well
       as the data sent to the receiver.  The receiver verifies it and



Khandwala                    Standards Track                    [Page 8]

RFC 1                            PRFC's                   September 2018


       in case of mismatch in the checksum, simply drops the packet and
       waits for retransmission.

   d.  In scenarios where the channel may be noisy, the RIPP protocol
       includes an optional forward error correcting code (ECC) which
       provides reliability at the expense of redundancy of sending
       data.  The redundancy allows the receiver to detect a limited
       number of errors that may occur anywhere in the message, and
       often to correct these errors without re-transmission.  FEC gives
       the receiver the ability to correct errors without needing a
       reverse channel to request re-transmission of data, but at the
       cost of a fixed, higher forward channel bandwidth

   e.  In the scenario where duplicate data is received during
       retransmission, judged by SEQ number of the packet, the receiver
       simply discards them.  In the case where phantom packets (unknown
       or radically different SEQ numbers) are received, the receiver
       simply discards them according to the RIPP protocol.

4.5.  Packet Descriptions

   Based on the discussion above, the RIPP packet can be defined as
   follows by utilizing the Playground packet types: -



   from playground.network.packet import PacketType
   from playground.network.packet.fieldtypes import \
   UINT32,UINT8,UINT16, STRING, BUFFER, BOOL
   from playground.network.packet.fieldtypes.attributes import \
   Optional

   class RIPPPacket(PacketType):

      DEFINITION_IDENTIFIER = "RIPP.kandarp.packet"
      DEFINITION_VERSION = "1.0"

      FIELDS = [

      ("Type", UINT8),
      ("SeqNo", UINT32({Optional: True})),
      ("AckNo", UINT32({Optional: True})),
      ("CRC", UINT16),
      ("FRC", UINT32({Optional: True})),
      ("Data", BUFFER({Optional: True}))

      ]




Khandwala                    Standards Track                    [Page 9]

RFC 1                            PRFC's                   September 2018


4.6.  Computational Algorithms

   The algorithm of choice is left to the user.  The RIPP protocol only
   specifies that the chosen algorithms used for CRC and FRC be simple,
   fast and should focus on speed rather than collision resistance or
   other unnecessary properties of hash functions or error correcting
   codes.  The Forward Error Correcting code should also enable
   correction up to a certain limit without adding too much bulk to the
   packet or the header.

4.7.  State Machines

   Figure 3 below specifies the state diagram for the RIPP protocol.






































Khandwala                    Standards Track                   [Page 10]

RFC 1                            PRFC's                   September 2018


                               +---------+ ---------\      active OPEN
                               |  CLOSED |            \    -----------
                               +---------+<---------\   \   create TCB
                                 |     ^              \   \  snd SYN
                    passive OPEN |     |   CLOSE        \   \
                    ------------ |     | ----------       \   \
                     create TCB  |     | delete TCB         \   \
                                 V     |                      \   \
                               +---------+            CLOSE    |    \
                               |  LISTEN |          ---------- |     |
                               +---------+          delete TCB |     |
                    rcv SYN      |     |     SEND              |     |
                   -----------   |     |    -------            |     V
  +---------+      snd SYN,ACK  /       \   snd SYN          +---------+
  |         |<-----------------           ------------------>|         |
  |   SYN   |                    rcv SYN                     |   SYN   |
  |   RCVD  |<-----------------------------------------------|   SENT  |
  |         |                    snd ACK                     |         |
  |         |------------------           -------------------|         |
  +---------+   rcv ACK of SYN  \       /  rcv SYN,ACK       +---------+
    |           --------------   |     |   -----------
    |                  x         |     |     snd ACK
    |                            V     V
    |  CLOSE                   +---------+
    | -------                  |  ESTAB  |
    | snd FIN                  +---------+
    |                   CLOSE    |     |    rcv FIN
    V                  -------   |     |    -------
  +---------+          snd FIN  /       \   snd ACK          +---------+
  |  FIN    |<-----------------           ------------------>|  CLOSE  |
  | WAIT-1  |------------------                              |   WAIT  |
  +---------+          rcv FIN  \                            +---------+
    | rcv ACK of FIN   -------   |                            CLOSE  |
    | --------------   snd ACK   |                           ------- |
    V        x                   V                           snd FIN V
  +---------+                  +---------+                   +---------+
  |FINWAIT-2|                  | CLOSING |                   | LAST-ACK|
  +---------+                  +---------+                   +---------+
    |                rcv ACK of FIN |                 rcv ACK of FIN |
    |  rcv FIN       -------------- |    Timeout=2MSL -------------- |
    |  -------              x       V    ------------        x       V
     \ snd ACK                 +---------+delete TCB         +---------+
      ------------------------>|TIME WAIT|------------------>| CLOSED  |
                               +---------+                   +---------+

                       TCP Connection State Diagram
                                Figure 3.




Khandwala                    Standards Track                   [Page 11]

RFC 1                            PRFC's                   September 2018


5.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, DOI 10.17487/
              RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC2360]  Scott, G., "Guide for Internet Standards Writers", BCP 22,
              RFC 2360, DOI 10.17487/RFC2360, June 1998,
              <https://www.rfc-editor.org/info/rfc2360>.


Author's Address

   Kandarp Khandwala (editor)
   JHU Network Security Fall 2018
   JHU 160 Malone Hall/3400 North Charles St.
   Baltimore, MD  21218
   USA

   Phone: +1 443-763-9251
   Email: kck@jhu.edu





























Khandwala                    Standards Track                   [Page 12]

RFC 1                            PRFC's                   September 2018


Full Copyright Statement

   Copyright (C) Seth James Nielson (2018).  All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the PLAYGROUND experiment or
   other associated organizations, except by explicit permission.

   The limited permissions granted above are perpetual and will not be
   revoked by SETH JAMES NIELSON or his successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and SETH JAMES NIELSON and associated academic
   institutions DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The PLAYGROUND framework and student submissions for PLAYGROUND are
   intended to be free of any intellectual property conflicts.  All
   submitting parties, especially students, are not allowed to submit
   source code, specifications, or other components that are known to be
   protected by copyright, patents, or other IP mechanisms.  Students
   submitting creative content grant shared rights and ownership of
   their content to the PLAYGROUND project.  Specifically, any
   submission can be used in future educational settings including
   subsequent PLAYGROUND experiments.

   Any interested party is invited to bring to the experiment director's
   attention any copyrights, patents or patent applications, or other
   proprietary rights which may cover technology that may be currently
   in use without permission.

   It should be noted that these statements have not been reviewed by
   legal counsel.  Moreover, the academic institutions at which
   PLAYGROUND experiments take place may have additional or even
   conflicting copyright and intellectual property rules.  Accordingly,
   concerned parties may need to contact their own lawyer and/or
   resources at their institution to understand the rights and



Khandwala                    Standards Track                   [Page 13]

RFC 1                            PRFC's                   September 2018


   limitations associated with code donated to a PLAYGROUND experiment.


















































Khandwala                    Standards Track                   [Page 14]

